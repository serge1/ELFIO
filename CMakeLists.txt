cmake_minimum_required(VERSION 3.12)

# Detect if we are the top level CMakeLists.txt or are we included in some
# other project
if(NOT DEFINED PROJECT_NAME)
  set(IS_TOP_PROJECT TRUE)
endif()

# Turn this on in order to build elfio examples
option(ELFIO_BUILD_EXAMPLES "Build ELFIO examples" OFF)

# Turns this on in order to build tests
option(ELFIO_BUILD_TESTS    "Build ELFIO tests" OFF)

# Read version from header file
set(version_header "elfio/elfio_version.hpp")
file(READ ${version_header} ver)
string(REGEX MATCH "#define ELFIO_VERSION \"([0-9\.]+)\"" _ ${ver})
if (NOT CMAKE_MATCH_1)
    message(FATAL_ERROR "Unable to parse version from ${version_header}")
endif()
set(version ${CMAKE_MATCH_1})

# Use configure_file to make configure step depend on elfio_version.hpp
configure_file(${version_header} ${CMAKE_CURRENT_BINARY_DIR}/elfio_version.hpp.copy COPYONLY)

project(elfio VERSION ${version} LANGUAGES C CXX)

include(GNUInstallDirs)

# Create a header only CMake target for elfio
add_library(elfio INTERFACE)
add_library(elfio::elfio ALIAS elfio)

target_include_directories(
    elfio
    INTERFACE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

if (ELFIO_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if (ELFIO_BUILD_TESTS AND IS_TOP_PROJECT)
    enable_testing()
    add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} USES_TERMINAL)
    add_subdirectory(tests)
endif()

# If this is the top level project, add in logic to install elfio
if (IS_TOP_PROJECT)
    include(CMakePackageConfigHelpers)

    # Create a file that includes the current project version. This will be
    # installed with the elfio CMake package.
    write_basic_package_version_file(
        "${PROJECT_NAME}ConfigVersion.cmake"
        VERSION
            ${PROJECT_VERSION}
        COMPATIBILITY
            SameMajorVersion)
    
    # Create the default ${PROJECT_NAME}Config.cmake file which will be
    # installed and found by calls to `find_package(elfio)`.
    configure_package_config_file(
        "${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in"
        "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        INSTALL_DESTINATION
            ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake)

    # Install the previously generated "config" and "version" files
    install(
        FILES
            "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
            "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
        DESTINATION
            ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake)

    # Install the entire local `elfio` directory to the include directory
    install(
        DIRECTORY
            elfio
        DESTINATION
            ${CMAKE_INSTALL_INCLUDEDIR})

    # Create a ${PROJECT_NAME}Targets.cmake file that is referenced by the
    # ${PROJECT_NAME}Config.cmake file and includes the target information
    # needed to compile/link against all targets exported under the
    # ${PROJECT_NAME}_Targets export
    install(
        EXPORT
            ${PROJECT_NAME}_Targets
        FILE
            ${PROJECT_NAME}Targets.cmake
        NAMESPACE
            ${PROJECT_NAME}::
        DESTINATION
            ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake)

    # Add the elfio target to the ${PROJECT_NAME}_Targets export
    install(
        TARGETS
            elfio
        EXPORT
            ${PROJECT_NAME}_Targets)
endif()